{
  "name": "grunt-spritesmith",
  "version": "0.5.6",
  "description": "Grunt library for using spritesmith",
  "main": "tasks/grunt-spritesmith.js",
  "scripts": {
    "test": "cd src-test && grunt"
  },
  "keywords": [
    "grunt",
    "gruntplugin",
    "sprite",
    "spritesheet",
    "css",
    "spritesmith"
  ],
  "author": {
    "name": "Todd Wolfson",
    "email": "todd@twolfson.com"
  },
  "license": "MIT",
  "dependencies": {
    "spritesmith": "~0.3.5",
    "json2css": "~1.2.0",
    "underscore": "~1.4.2",
    "url2": "*"
  },
  "_devDependencies": {
    "grunt": "~0.3.12"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-nodeunit": "~0.1.2"
  },
  "repositories": [
    {
      "type": "git",
      "url": "https://github.com/Ensighten/grunt-spritesmith.git"
    }
  ],
  "readme": "grunt-spritesmith\n=================\nGrunt library for using [spritesmith](https://github.com/Ensighten/spritesmith), a spritesheet and CSS pre-processor utility.\n\nSynopsis\n--------\n[Spritesmith](https://github.com/Ensighten/spritesmith) accepts a list of images, stiches them together, and returns that image along with a coordinate map of where each image is located and its dimensions.\n\n[Grunt](https://github.com/gruntjs/grunt/) is a node.js based CLI build tool.\n\n[json2css](https://github.com/twolfson/json2css) converts the output from [Spritesmith](https://github.com/Ensighten/spritesmith) and generates variables and helper functions for hooking into inside of your CSS pre-processor.\n\nWhen you combine all three of these, you get a grunt plugin that makes maintaining sprites a breeze.\n\nGetting Started\n---------------\nInstall this grunt plugin next to your project's [grunt.js gruntfile](https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md) with: `npm install grunt-spritesmith`\n\nThen add this line to your project's `grunt.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-spritesmith');\n```\n\nRequirements\n------------\nSpritesmith supports multiple sprite engines however all of the current engines require external software to be installed.\n\nAs a result, you must either have [Cairo](http://cairographics.org/) or [Graphics Magick](http://www.graphicsmagick.org/) installed for Spritesmith to run properly.\n\n### Cairo (node-canvas)\nDue to dependance on [node-canvas](https://github.com/learnboost/node-canvas), you must install [Cairo](http://cairographics.org/).\n\nInstructions on how to do this are provided in the [node-canvas wiki](https://github.com/LearnBoost/node-canvas/wiki/_pages).\n\nAdditionally, you will need to install [node-gyp](https://github.com/TooTallNate/node-gyp/)\n```shell\nsudo npm install -g node-gyp\n```\n\n### Graphics Magick (gm)\nThe alternative engine is [gm](https://github.com/aheckmann/gm) which runs on top of [Graphics Magick](http://www.graphicsmagick.org/).\n\nI have found it is best to install from the site rather than through a package manager (e.g. `apt-get`) to get the latest as well as without transparency issues.\n\nThis module has been developed and tested against `1.3.17`.\n\nUsage\n-----\n```js\ngrunt.initConfig({\n  'sprite': {\n    'all': {\n      // Sprite files to read in\n      'src': ['public/images/sprites/*.png'],\n\n      // Location to output spritesheet\n      'destImg': 'public/images/sprite.png',\n\n      // Stylus with variables under sprite names\n      'destCSS': 'public/css/sprite_positions.styl',\n\n      // OPTIONAL: Manual override for imgPath specified in CSS\n      'imgPath': '../sprite.png',\n\n      // OPTIONAL: Specify algorithm (top-down, left-right, diagonal, alt-diagonal)\n      'algorithm': 'alt-diagonal',\n\n      // OPTIONAL: Specify engine (auto, canvas, gm)\n      'engine': 'canvas',\n\n      // OPTIONAL: Specify CSS format (inferred from destCSS' extension by default) (stylus, scss, sass, less, json)\n      'cssFormat': 'json',\n\n      // OPTIONAL: Specify img options\n      'imgOpts': {\n         // Format of the image (inferred from destImg' extension by default) (jpg, png)\n         'format': 'png',\n\n         // Quality of image (gm only)\n         'quality': 90\n      }\n    }\n  }\n});\n```\n\nContributing\n------------\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint via [grunt](https://github.com/gruntjs/grunt/) and test via `npm test`.\n\n### Algorithms\nAlgorithms are maintained via [twolfson/layout](https://github.com/twolfson/layout). If you would like to add one, please submit it via a pull request.\n\n### Engines and image options\nEngines and image options are maintained via [Ensighten/spritesmith](https://github.com/Ensighten/spritesmith). If you would like to add one, please submit it via a pull request.\n\n### CSS formats\nCSS formats are maintained via [twolfson/json2css](https://github.com/twolfson/json2css). If you would like to add one, please submit it via a pull request.\n\nLicense\n-------\nCopyright (c) 2012 Ensighten\nLicensed under the MIT license.",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/Ensighten/grunt-spritesmith.git"
  },
  "bugs": {
    "url": "https://github.com/Ensighten/grunt-spritesmith/issues"
  },
  "homepage": "https://github.com/Ensighten/grunt-spritesmith",
  "_id": "grunt-spritesmith@0.5.6",
  "_from": "grunt-spritesmith@~0.5.2"
}
